generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SystemAdmin {
  id                  String        @id @default(uuid())
  name                String
  email               String        @unique
  password            String
  title               UserType      @relation(fields: [titleName], references: [name])
  titleName           String        @default("system_admin")
  refreshToken        String?
  systemAdminCreator  SystemAdmin?  @relation(fields: [creator], references: [id], name: "system admins created")
  creator             String?
  systemAdminsCreated SystemAdmin[] @relation("system admins created")
  pharmaciesCreated   Pharmacy[]
}

model PharmacyAdmin {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  title        UserType @relation(fields: [titleName], references: [name])
  titleName    String   @default("pharmacy_admin")
  refreshToken String?

  pharmacy           Pharmacy @relation(fields: [associatedPharmacy], references: [id], onDelete: Cascade)
  associatedPharmacy String   @unique

  pharmacyManagersCreated PharmacyManager[]
  cachiersCreated         Cachier[]
}

model PharmacyManager {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  title        UserType @relation(fields: [titleName], references: [name])
  titleName    String   @default("pharmacy_manager")
  refreshToken String?

  pharmacyAdminCreator PharmacyAdmin @relation(fields: [creator], references: [id])
  creator              String

  pharmacy           Pharmacy @relation(fields: [associatedPharmacy], references: [id], onDelete: Cascade)
  associatedPharmacy String   @unique
}

model Cachier {
  id                   String        @id @default(uuid())
  name                 String
  email                String        @unique
  password             String
  title                UserType      @relation(fields: [titleName], references: [name])
  titleName            String        @default("cachier")
  refreshToken         String?
  pharmacyAdminCreator PharmacyAdmin @relation(fields: [creator], references: [id], onDelete: Cascade)
  creator              String
  pharmacy             Pharmacy      @relation(fields: [associatedPharmacy], references: [id], onDelete: Cascade)
  associatedPharmacy   String        @unique
}

model Customer {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  title        UserType @relation(fields: [titleName], references: [name])
  titleName    String   @default("customer")
  refreshToken String?
}

model UserType {
  name             String            @id
  description      String?
  SystemAdmins     SystemAdmin[]
  pharmacyAdmins   PharmacyAdmin[]
  pharmacyManagers PharmacyManager[]
  cachiers         Cachier[]
  customers        Customer[]
}

model Pharmacy {
  id          String  @id @default(uuid())
  name        String  @unique
  email       String  @unique
  phoneNumber String  @unique
  address     String
  hourly      String
  allNight    Boolean

  pharmacyAdmin PharmacyAdmin?

  systemAdminCreator SystemAdmin @relation(fields: [creator], references: [id])
  creator            String

  phamarmacyManagers PharmacyManager[]
  cachiers           Cachier[]
}

model PharmaceuticalProduct {
  id   String @id @default(uuid())
  name String
}

model Complain {
  id      String @id @default(uuid())
  title   String
  message String
}

// npx prisma migrate dev --name init

// delete the pharmacy and along side all the information releted to that pharmacy (also test and make sure that it is the same for the system admin)
// See if it is pertinent to have pharmcacy admin creator on the pharmacy manager and cachier tables.
