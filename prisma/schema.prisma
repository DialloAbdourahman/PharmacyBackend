generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SystemAdmin {
  id           String  @id @default(uuid())
  name         String
  email        String  @unique
  password     String
  refreshToken String?

  title              UserType     @relation(fields: [titleName], references: [name])
  titleName          String       @default("system_admin")
  systemAdminCreator SystemAdmin? @relation(fields: [creator], references: [id], name: "system admins created")
  creator            String?

  systemAdminsCreated SystemAdmin[] @relation("system admins created")
  pharmaciesCreated   Pharmacy[]
}

model PharmacyAdmin {
  id           String  @id @default(uuid())
  name         String
  email        String  @unique
  password     String
  refreshToken String?

  title                UserType       @relation(fields: [titleName], references: [name])
  titleName            String         @default("pharmacy_admin")
  pharmacy             Pharmacy       @relation(fields: [associatedPharmacy], references: [id], onDelete: Cascade)
  associatedPharmacy   String
  pharmacyAdminCreator PharmacyAdmin? @relation(fields: [creator], references: [id], name: "pharmacyAdminsCreated")
  creator              String?

  pharmacyAdminsCreated PharmacyAdmin[] @relation("pharmacyAdminsCreated")
  cachiersCreated       Cachier[]
}

model Cachier {
  id           String  @id @default(uuid())
  name         String
  email        String  @unique
  password     String
  refreshToken String?

  title                UserType      @relation(fields: [titleName], references: [name])
  titleName            String        @default("cachier")
  pharmacyAdminCreator PharmacyAdmin @relation(fields: [creator], references: [id], onDelete: Cascade)
  creator              String
  pharmacy             Pharmacy      @relation(fields: [associatedPharmacy], references: [id], onDelete: Cascade)
  associatedPharmacy   String        @unique

  sales Sale[]
}

model Customer {
  id           String  @id @default(uuid())
  name         String
  email        String  @unique
  password     String
  refreshToken String?

  title     UserType @relation(fields: [titleName], references: [name])
  titleName String   @default("customer")

  orders Order[]
}

model UserType {
  name        String  @id
  description String?

  SystemAdmins   SystemAdmin[]
  pharmacyAdmins PharmacyAdmin[]
  cachiers       Cachier[]
  customers      Customer[]
}

model Pharmacy {
  id          String  @id @default(uuid())
  name        String  @unique
  email       String  @unique
  phoneNumber String  @unique
  address     String
  hourly      String
  allNight    Boolean
  latitude    Float
  longitude   Float

  systemAdminCreator SystemAdmin @relation(fields: [creator], references: [id])
  creator            String

  pharmacyAdmin PharmacyAdmin[]
  cachiers      Cachier[]
  products      Product[]
}

model ProductList {
  id          String @id @default(uuid())
  name        String @unique
  description String
  normalPrice Float

  products Product[]

  @@index(fields: [name])
}

model Product {
  id       String  @id @default(uuid())
  price    Float
  amount   Int     @default(0)
  reserved Boolean @default(false)

  productList     ProductList @relation(fields: [product], references: [id], onDelete: Cascade)
  product         String
  pharmacy        Pharmacy    @relation(fields: [pharmacySelling], references: [id], onDelete: Cascade)
  pharmacySelling String

  orders Order[]
  sales  Sale[]
}

model Order {
  id        String   @id @default(uuid())
  quantity  Int
  date      DateTime @default(now())
  fulfilled Boolean  @default(false)

  orderedProduct   Product  @relation(fields: [productId], references: [id])
  productId        String
  customerOrdering Customer @relation(fields: [customerId], references: [id])
  customerId       String
}

model Sale {
  id       String   @id @default(uuid())
  quantity Int
  date     DateTime @default(now())

  soldProduct    Product @relation(fields: [productId], references: [id])
  productId      String
  cachierSelling Cachier @relation(fields: [cachierId], references: [id])
  cachierId      String
}

model Complain {
  id      String @id @default(uuid())
  title   String
  message String
}

// npx prisma migrate dev --name init 

// Do not allow a pharmacy admin to create a product that his pharmacy has already. Suggest him to change the amount instead
// See all the orders of a pharmacy (pharmacy admin and cachier)

// Hard to be implemented last
// cancel order. (consider taking an array) (customer and cachier)
